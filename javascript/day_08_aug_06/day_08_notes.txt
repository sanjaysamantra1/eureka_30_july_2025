Additionally:
	Array.isArray(arr) checks arr for being an array.
	Array.from()  change array-like or iterable into true array
	Array.of()  create array from every arguments passed into it.

const nums = Array.of(1, 2, 3, 4, 5, 6);
console.log(nums);


let mySet = new Set()
mySet.add(2).add(3).add(4);
console.log(Array.from(mySet))

const lis = document.querySelectorAll('li');
const lisArray = Array.from(document.querySelectorAll('li'));

// is true array?
console.log(Array.isArray(lis)); // output: false
console.log(Array.isArray(lisArray));  // output: true

var arr = [10,20,30]
var x = arr.values();
console.log(x)
var y = Array.from(x)
console.log(y)


Array Mutability/Immutability
============================
1. Even when declared as const, the elements of an array can be changed, added, or removed. However, the reference to the array cannot be reassigned.
	const arr = [1, 2, 3];
	arr[0] = 42;
	arr.push(4); // Mutating the array (allowed)
	console.log(arr); // [42, 2, 3, 4]
	// Reassigning the array (not allowed with `const`)
	arr = [5, 6, 7]; // TypeError: Assignment to constant variable.

2. Immutability (Freezing an Array) (Object.freeze() is shallow, meaning nested objects or arrays are still mutable)
	const arr = Object.freeze([1, 2, 3]);
	arr[0] = 42; // Attempting to mutate the array
	arr.push(4); // TypeError: Cannot add property 3, object is not extensible
	console.log(arr); // [1, 2, 3]
	
3. create new arrays instead of modifying existing ones. (map(), filter() , spread operator)
    const arr = [1, 2, 3];
	const newArr = [...arr, 4]; // Adds 4 without modifying the original
	console.log(newArr); // [1, 2, 3, 4]
	console.log(arr);    // [1, 2, 3] (unchanged)




Array Copy
==========
let arr1 = [10, 20];
let arr2 = arr1;  // address/reference copy ( Not value copy)
-A new array is not being created, rather same address is being assigned to arr2
-Both arr1 & arr2 are holding the same address

let arr1 = [10, 20, [30, 31]];
let arr2 = [...arr1]; // value copy - shallow copy

let arr3 = [10, 20, [30, 31]];
let arr4 = structuredClone(arr3); // value copy - Deep Copy

-A shallow copy of an array is a copy whose nested elements share the same references.
 (Nested arrays will not be copied by value)
-A deep copy of an array is a copy whose nested elements do not share the same references.



Class  &  Object
================
class - structure/blueprint/template for creating Object 
		class has only logical existance
		class doesn't have physical existance
		
object - Real Entity
		 every instance of a class
		 Object has physical existance

-a class in javascript is created using constructor function(ES-5).
-a class in javascript is created using class keyword.(ES-6).
-class contains variables(states/properties) and methods(behaviours) inside it.



Prototype
---------
-A prototype is an object used to implement structure, state, and behaviour inheritance.
-Prototype is the mechanism by which JavaScript objects inherit features from one another
-Prototype is an object, where we can attach methods and properties,which enables all the other objects to inherit these methods and properties.
-Prototype is a base class for all the objects, and it helps us to achieve inheritance.
-All JavaScript objects inherit properties and methods from a prototype.
-properties added to the prototype of a class gets available to all the objects of that class.
-prototype should be used When we have to add new properties like variables and methods 
at a later point of time,and these properties needs to be shared across all the instances, 
-a property should be added to the constructor of a class if value of the property changes per object
-a property should be added to the prototype of a class if the value remains same for all objects.


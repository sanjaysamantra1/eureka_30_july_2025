datatypes
=========
-Type of data we are dealing open_with

2 types : primitive , non-primitives

primitives : number, string , boolean , undefined , bigint, euro_symbol
non-primitive : object


-primitives are immutable , non-primitives are mutable
-primitives are compared by value , non-primitives are compared by address




javascript - Programming language, follows ECMAScript standards
ECMA - European computer menufecturer association
ECMAScript - set of standards , followed by javascript


ES_5    <= june 2015
ES_6    2015   ( const , let , class , extends , module , .......)
ES_7    2016   
ES_8    2017   
ES_9    2018   
ES_10    2019   
ES_11    2020   
ES_12    2021   
ES_13    2022   
ES_14    2023   
ES_15    2024


How Javascript Works
====================
-When a javascript code is executed, N # of execution contexts are created.
-1 Global Execution context is created for every javascript program.
-For Each Function call 1 execution context is created.
-Execution context is the environment within which the current code is being executed.
-Each execution context has two phases: 
	1. creation phase. (Allocates memory - variables & functions and assign 'undefined' to variables)
	2. execution phase. (Code gets Executed - assign values to variables & method invocation)


https://www.youtube.com/watch?v=iLWTnMzWtj4&t=1044s


Variables
=========
-Variables are containers for storing data values. 
 Variable is a name of memory location.
-Variables in Javascript can be declared by using either one of the below 3 keywords:
 1. var   
 2. let
 3. const

	var						let						 const
======================================================================
1.since begining		 1.ECMASCRIPT-6(2015)		1.ECMASCRIPT-6(2015)
2.value can be changed   2.value can be changed     2.cann't be changed
3.initialization is		 3.initialization is		3.mandatory
	not mandatory           not mandatory	
4.can be redeclared		 4.cann't be redeclared		4.cann't be redeclared
5.function/global		 6.block/function/global	6.block/function/global
6.TDZ - No			 	 5.TDZ - Yes				5.TDZ - Yes

N:p - All variables (var,let,const) are hoisted but only 'var' variables are usable/reachable before initialization.
-let/const variables are not reachable/usable before initialization (Temporal Dead Zone)

	
Hoisting:
=========
-hoisting is a mechanism where variable and function declarations are moved to the top of their containing scope during the compilation phase, before the code is executed.
-Variables declared with var are hoisted, but their values are not initialized. They are given an initial value of undefined.
-Variables declared with let and const are also hoisted but are not initialized. Accessing them before declaration results in a ReferenceError because they are in the "temporal dead zone."
-Function declarations are hoisted, meaning you can call them before they appear in the code.

Type			   Hoisted?			   Initialized?			  Usable before declaration?
=========================================================================================
var					✅ Yes				❌ Undefined			⚠️ Allowed but undefined
let					✅ Yes				❌ No					❌ ReferenceError
const				✅ Yes				❌ No					❌ ReferenceError
Func Declaration	✅ Yes				✅ Yes					✅ Allowed
Func Expression 	✅ Yes				❌ Undefined			❌ TypeError



Temporal Dead Zone
==================
-The period between entering scope and being initialized where they cannot be accessed. 
 This period is the temporal dead zone (TDZ).
-The state where variables are un-reachable. They are in memory, but they aren't usable.
-The let and const variables exist in the TDZ from the start of their enclosing scope until they are initialized.
-if a let/const variable is accessed before its initialization, it would throw a ReferenceError. Because of the TDZ.



What’s the difference between context and scope?
=============================================== 
-The context is (roughly) the object that calls the function. 
-And the scope is all the variables visible to a function where it is defined. 
-One cares about how it is called, the other cares about how it is defined.



variable scope: 
==============
-Scope is a certain section/region of the program where a defined variable can have its existence and can be recognized, beyond that it can’t be accessed.
-Scope determines the visibility and accessibility of a variable.
-Every variable will have either 1 of the below 3 scopes.
	1. global
	2. function/Local
	3. block